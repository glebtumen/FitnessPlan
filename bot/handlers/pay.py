from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram import Bot
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ContentType, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from bot.database.supabase import update_user_access
import logging
from .user import cmd_start

from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)

router = Router()

ADMIN_ID = 409472138  # Hardcoded admin ID


class PayStates(StatesGroup):
    select_payment_method = State()
    show_bank_transfer_details = State()
    send_cheque = State()


@router.message(Command("pay"))
async def process_pay_command(message: types.Message, state: FSMContext) -> None:
    bank_payment_details = """–ê–ª—å—Ñ–∞ - 3123123
–¢–∏–Ω—å–∫ - 1231321"""

    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="üîó –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_payment"
        )
    )
    # builder.row(
    #     types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    # )
    # builder.row(types.InlineKeyboardButton(text="üö´ –ó–∞–∫—Ä—ã—Ç—å", callback_data="cancel"))

    await message.answer(
        f"""–°—Ç–æ–∏–º–æ—Å—Ç—å:

1 –Ω–µ–¥–µ–ª—è - 300 RUB
1 –º–µ—Å—è—Ü - 750 RUB
3 –º–µ—Å—è—Ü–∞ - 2000 RUB

–î–ª—è –æ–ø–ª–∞—Ç—ã –±–∞–Ω–∫–æ–≤—Å–∫–∏–º –ø–µ—Ä–µ–≤–æ–¥–æ–º:

1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ (–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è) –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å—É–º–º—É –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:
{bank_payment_details}

2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã –Ω–∏–∂–µ:
""",
        reply_markup=builder.as_markup(),
    )


@router.callback_query(F.data == "check_payment")
async def send_cheque(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    await callback_query.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä–µ–≤–æ–¥–∞ (—á–µ–∫) –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞."
    )
    await state.set_state(PayStates.send_cheque)


@router.message(PayStates.send_cheque)
async def cheque_handler(message: Message, state: FSMContext) -> None:
    bot: Bot = message.bot

    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="1 –Ω–µ–¥–µ–ª—è", callback_data=f"approve_1week_{message.from_user.id}"
        ),
        types.InlineKeyboardButton(
            text="1 –º–µ—Å—è—Ü", callback_data=f"approve_1month_{message.from_user.id}"
        ),
    )
    builder.row(
        types.InlineKeyboardButton(
            text="3 –º–µ—Å—è—Ü–∞", callback_data=f"approve_3months_{message.from_user.id}"
        ),
        types.InlineKeyboardButton(
            text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{message.from_user.id}"
        ),
    )

    if message.content_type == "photo":
        await bot.send_photo(
            ADMIN_ID,
            message.photo[-1].file_id,
            caption=f"{message.from_user.full_name} (ID: {message.from_user.id})",
            reply_markup=builder.as_markup(),
        )
    elif message.content_type == "document":
        await bot.send_document(
            ADMIN_ID,
            message.document.file_id,
            caption=f"{message.from_user.full_name} (ID: {message.from_user.id})",
            reply_markup=builder.as_markup(),
        )

    await message.answer("–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    await state.clear()


@router.callback_query(F.data == "cancel")
async def cancel_handler(
    callback_query: types.CallbackQuery, state: FSMContext
) -> None:
    await callback_query.message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()


@router.callback_query(F.data.startswith("approve_"))
async def approve_payment(callback_query: types.CallbackQuery) -> None:
    # Extract data from callback
    parts = callback_query.data.split("_")
    if len(parts) != 3:
        await callback_query.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞")
        return

    duration = parts[1]  # 1week, 1month, or 3months
    user_id = int(parts[2])

    # Update user access in database
    success = await update_user_access(user_id, duration)

    if success:
        duration_text = {
            "1week": "1 –Ω–µ–¥–µ–ª—é",
            "1month": "1 –º–µ—Å—è—Ü",
            "3months": "3 –º–µ—Å—è—Ü–∞",
        }.get(duration, duration)

        # Notify admin
        await callback_query.message.answer(
            f"‚úÖ –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ {duration_text}.\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID {user_id}"
        )

        # Notify user
        try:
            start_kb = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è")],
                ],
                row_width=5,
                resize_keyboard=True,
            )

            await callback_query.bot.send_message(
                user_id,
                f'‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ {duration_text}. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è"',
                reply_markup=start_kb,
            )
            await cmd_start(Message)
        except Exception as e:
            logging.error(f"Failed to notify user {user_id}: {e}")
    else:
        await callback_query.message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}."
        )

    await callback_query.answer()


@router.callback_query(F.data.startswith("decline_"))
async def decline_payment(callback_query: types.CallbackQuery) -> None:
    # Extract user ID from callback
    parts = callback_query.data.split("_")
    if len(parts) != 2:
        await callback_query.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞")
        return

    user_id = int(parts[1])

    # Notify admin
    await callback_query.message.answer(
        f"‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n\n" f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID {user_id}"
    )

    # Notify user
    try:
        await callback_query.bot.send_message(
            user_id,
            "‚ùå –í–∞—à –ø–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @oslsldododo –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
        )
    except Exception as e:
        logging.error(f"Failed to notify user {user_id}: {e}")

    await callback_query.answer()
