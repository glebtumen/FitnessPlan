from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)
from aiogram.fsm.context import FSMContext

from bot.states.fitness import FitnessForm
from bot.keyboards.reply import gender_kb, activity_kb, exclusions_kb, goal_kb
from bot.services.calculator import calculate_calories
from bot.services.meal_planning import get_meal_plan
from bot.database.supabase import save_user_data, check_user_access
import asyncio

router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    start_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è")],
        ],
        row_width=5,
        resize_keyboard=True,
    )

    await message.reply(
        """
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –§–∏—Ç–Ω–µ—Å –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç!

–£ –º–µ–Ω—è –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/pay - –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø

–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è"

""",
        reply_markup=start_kb,
    )


@router.message(F.text == "–ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è")
async def cmd_plan(message: Message, state: FSMContext):
    # Check if user has access
    has_access = await check_user_access(message.from_user.id)
    print(has_access, flush=True)
    if not has_access:
        # Create keyboard with pay button
        pay_kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="/pay")]],
            resize_keyboard=True,
        )

        await message.reply(
            "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.\n\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=pay_kb,
        )
        return

    # User has access, proceed with the plan
    await message.reply(
        "–î–∞–≤–∞–π—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º –≤–∞—à—É –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π –∏ —Å–æ—Å—Ç–∞–≤–∏–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è.\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
        reply_markup=gender_kb,
    )
    await state.set_state(FitnessForm.waiting_for_gender)


@router.message(FitnessForm.waiting_for_gender)
async def process_gender(message: Message, state: FSMContext):
    if message.text.lower() not in ["–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π"]:
        return await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏.")

    await state.update_data(gender=message.text.lower())
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(FitnessForm.waiting_for_age)


@router.message(FitnessForm.waiting_for_age)
async def process_age(message: Message, state: FSMContext):
    if not message.text.isdigit() or not (10 <= int(message.text) <= 120):
        return await message.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 10 –¥–æ 120 –ª–µ—Ç."
        )

    await state.update_data(age=message.text)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70):")
    await state.set_state(FitnessForm.waiting_for_weight)


@router.message(FitnessForm.waiting_for_weight)
async def process_weight(message: Message, state: FSMContext):
    try:
        weight = float(message.text)
        if not (30 <= weight <= 300):
            raise ValueError
    except ValueError:
        return await message.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –æ—Ç 30 –¥–æ 300 –∫–≥."
        )

    await state.update_data(weight=message.text)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 170):")
    await state.set_state(FitnessForm.waiting_for_height)


@router.message(FitnessForm.waiting_for_height)
async def process_height(message: Message, state: FSMContext):
    try:
        height = float(message.text)
        if not (100 <= height <= 250):
            raise ValueError
    except ValueError:
        return await message.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç –æ—Ç 100 –¥–æ 250 —Å–º."
        )

    await state.update_data(height=message.text)
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", reply_markup=activity_kb
    )
    await state.set_state(FitnessForm.waiting_for_activity)


@router.message(FitnessForm.waiting_for_activity)
async def process_activity(message: Message, state: FSMContext):
    if not any(
        level in message.text for level in ["1.2", "1.375", "1.55", "1.7", "1.9"]
    ):
        return await message.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏."
        )

    await state.update_data(activity=message.text)
    await message.reply(
        "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–µ–¥—É–µ—Ç –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –æ—Ä–µ—Ö–∏, –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã).\n"
        "–ï—Å–ª–∏ –Ω–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–π, –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É:",
        reply_markup=exclusions_kb,
    )
    await state.set_state(FitnessForm.waiting_for_exclusions)


@router.message(FitnessForm.waiting_for_exclusions)
async def process_exclusions(message: Message, state: FSMContext):
    exclusions = "–ù–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–π" if message.text == "–ù–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–π" else message.text
    await state.update_data(exclusions=exclusions)
    await message.reply("–ö–∞–∫–æ–≤–∞ –≤–∞—à–∞ —Ü–µ–ª—å?", reply_markup=goal_kb)
    await state.set_state(FitnessForm.waiting_for_goal)


def split_text(text: str, chunk_size: int = 2000) -> list:
    chunks = []
    while text:
        if len(text) <= chunk_size:
            chunks.append(text)
            break

        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –ø—Ä–æ–±–µ–ª –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö chunk_size
        split_pos = text.rfind("\n", 0, chunk_size)
        if split_pos == -1:
            split_pos = text.rfind(" ", 0, chunk_size)

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ—Å—Ç–æ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–µ–∑–∞–µ–º
        split_pos = chunk_size if split_pos == -1 else split_pos

        chunks.append(text[:split_pos].strip())
        text = text[split_pos:].strip()

    return chunks


@router.message(FitnessForm.waiting_for_goal)
async def process_goal(message: Message, state: FSMContext):
    if message.text not in ["–ü–æ—Ö—É–¥–µ—Ç—å", "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞", "–ù–∞–±—Ä–∞—Ç—å –≤–µ—Å"]:
        return await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏.")

    await state.update_data(goal=message.text)
    user_data = await state.get_data()

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç —Ä–∞—Å—á–µ—Ç...")

    calories = await calculate_calories(user_data)
    exclusions_text = (
        ""
        if user_data["exclusions"] == "–ù–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–π"
        else f"\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–∫–ª—é—á–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –ø–ª–∞–Ω–∞: {user_data['exclusions']}"
    )
    meal_plan = await get_meal_plan(calories, exclusions_text)

    success = await save_user_data(message.from_user.id, user_data, calories)

    if not success:
        await message.reply("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö.")

    await message.reply(
        f"–ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n"
        f"‚Ä¢ –ü–æ–ª: {user_data['gender'].capitalize()}\n"
        f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {user_data['age']}\n"
        f"‚Ä¢ –í–µ—Å: {user_data['weight']} –∫–≥\n"
        f"‚Ä¢ –†–æ—Å—Ç: {user_data['height']} —Å–º\n"
        f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {user_data['activity']}\n"
        f"‚Ä¢ –ò—Å–∫–ª—é—á–µ–Ω–∏—è: {user_data['exclusions']}\n"
        f"‚Ä¢ –¶–µ–ª—å: {user_data['goal']}\n\n"
        f"–í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {calories} –∫–∫–∞–ª\n\n"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
    chunks = split_text(meal_plan, chunk_size=2000)

    for i, chunk in enumerate(chunks):
        reply_text = (
            f"üçè –ß–∞—Å—Ç—å {i+1} –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è:\n\n{chunk}"
            if len(chunks) > 1
            else f"üçè –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è:\n\n{chunk}"
        )

        markup = (
            ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="/start")]], resize_keyboard=True
            )
            if i == len(chunks) - 1
            else ReplyKeyboardRemove()
        )

        await message.answer(reply_text, reply_markup=markup)
        await asyncio.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

    await state.clear()

    await state.clear()
